####################################
# Akka Actor Reference Config File #
####################################
 
# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.
 
akka {
  # Akka version, checked against the runtime version of Akka.
  #version = "2.5.14"
 
  # Home directory of Akka, modules in the deploy directory will be loaded
  home = ""
 
  # Loggers to register at boot time (Logging$DefaultLogger logs to STDOUT)
  loggers = ["akka.event.Logging$DefaultLogger"]

  # Loggers are created and registered synchronously during ActorSystem
  # start-up, and since they are actors, this timeout is used to bound the
  # waiting time
  logger-startup-timeout = 5s
 
  # Log level used by the configured loggers (see "event-handlers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: ERROR, WARNING, INFO, DEBUG
  loglevel = "ERROR"
 
  # Log level for the very basic logger activated during AkkaApplication startup
  # Options: ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "WARNING"

  # Maximum number of Actor dead letters to log
  log-dead-letters = 0

  # Enable/Disable logging of Actor dead letters
  log-dead-letters-during-shutdown = off

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off
 
  # List FQCN of extensions which shall be loaded at actor system startup.
  # Should be on the format: 'extensions = ["foo", "bar"]' etc.
  # See the Akka Documentation for more info about Extensions
  extensions = []
 
  # Toggles whether the threads created by this ActorSystem should be daemons or not
  daemonic = off
 
  # JVM shutdown, System.exit(-1), in case of a fatal error, such as OutOfMemoryError
  jvm-exit-on-fatal-error = on
 
  actor {
 
    provider = "akka.actor.LocalActorRefProvider"
    #provider = "akka.actor.RemoteActorRefProvider"
 
    # Timeout for ActorSystem.actorOf
    creation-timeout = 20s
 
    # frequency with which stopping actors are prodded in case they had to be
    # removed from their parents
    reaper-interval = 5s
 
    # Serializes and deserializes (non-primitive) messages to ensure immutability,
    # this is only intended for testing.
    serialize-messages = off
 
    # Serializes and deserializes creators (in Props) to ensure that they can be sent over the network,
    # this is only intended for testing.
    serialize-creators = off
 
    typed {
      # Default timeout for typed actor methods with non-void return type
      timeout = 5s
    }
 
    
 
    default-dispatcher {
      # Must be one of the following
      # Dispatcher, (BalancingDispatcher, only valid when all actors using it are of
      # the same type), PinnedDispatcher, or a FQCN to a class inheriting
      # MessageDispatcherConfigurator with a constructor with
      # com.typesafe.config.Config parameter and akka.dispatch.DispatcherPrerequisites
      # parameters.
      # PinnedDispatcher must be used together with executor=thread-pool-executor.
      type = "Dispatcher"
 
      # Which kind of ExecutorService to use for this dispatcher
      # Valid options:
      #               "fork-join-executor" requires a "fork-join-executor" section
      #               "thread-pool-executor" requires a "thread-pool-executor" section
      #               or
      #               A FQCN of a class extending ExecutorServiceConfigurator
      executor = "fork-join-executor"
 
      # This will be used if you have set "executor = "fork-join-executor""
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8
 
        # Parallelism (threads) ... ceil(available processors * factor)
        parallelism-factor = 3.0
 
        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64
      }
 
      # This will be used if you have set "executor = "thread-pool-executor""
      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 60s
 
        # Min number of threads to cap factor-based core number to
        core-pool-size-min = 8
 
        # No of core threads ... ceil(available processors * factor)
        core-pool-size-factor = 3.0
 
        # Max number of threads to cap factor-based number to
        core-pool-size-max = 64
 
        # Hint: max-pool-size is only used for bounded task queues
        # minimum number of threads to cap factor-based max number to
        max-pool-size-min = 8
 
        # Max no of threads ... ceil(available processors * factor)
        max-pool-size-factor  = 3.0
 
        # Max number of threads to cap factor-based max number to
        max-pool-size-max = 64
 
        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1
 
        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"
 
        # Allow core threads to time out
        allow-core-timeout = on
      }
 
      # How long time the dispatcher will wait for new actors until it shuts down
      shutdown-timeout = 1s
 
      # Throughput defines the number of messages that are processed in a batch
      # before the thread is returned to the pool. Set to 1 for as fair as possible.
      throughput = 1		
 
      # Throughput deadline for Dispatcher, set to 0 or negative for no deadline
      throughput-deadline-time = 0ms
 
      # If negative (or zero) then an unbounded mailbox is used (default)
      # If positive then a bounded mailbox is used and the capacity is set using the
      # property
      # NOTE: setting a mailbox to 'blocking' can be a bit dangerous, could lead to
      # deadlock, use with care
      # The following mailbox-push-timeout-time is only used for type=Dispatcher and
      # only if mailbox-capacity > 0
      mailbox-capacity = -1
 
      # Specifies the timeout to add a new message to a mailbox that is full -
      # negative number means infinite timeout. It is only used for type=Dispatcher
      # and only if mailbox-capacity > 0
      mailbox-push-timeout-time = 10s
 
      # FQCN of the MailboxType, if not specified the default bounded or unbounded
      # mailbox is used. The Class of the FQCN must have a constructor with
      # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
      mailbox-type = ""
 
      # For BalancingDispatcher: If the balancing dispatcher should attempt to
      # schedule idle actors using the same dispatcher when a message comes in,
      # and the dispatchers ExecutorService is not fully busy already.
      attempt-teamwork = on
 
      # For Actor with Stash: The default capacity of the stash.
      # If negative (or zero) then an unbounded stash is used (default)
      # If positive then a bounded stash is used and the capacity is set using the
      # property
      stash-capacity = -1
    }
 
    debug {
      # enable function of Actor.loggable(), which is to log any received message at
      # DEBUG level, see the “Testing Actor Systems” section of the Akka Documentation
      # at http://akka.io/docs
      receive = off
 
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
      autoreceive = off
 
      # enable DEBUG logging of actor lifecycle changes
      lifecycle = off
 
      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = off
 
      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off
    }
 
    # Entries for pluggable serializers and their bindings.
    serializers {
      java = "akka.serialization.JavaSerializer"
      # proto = "akka.remote.serialization.ProtobufSerializer"
    }
 
    # Class to Serializer binding. You only need to specify the name of an interface
    # or abstract base class of the messages. In case of ambiguity it is using the
    # most specific configured class, or giving a warning and choosing the “first” one.
    #
    # To disable one of the default serializers, assign its class to "none", like
    # "java.io.Serializable" = none
    serialization-bindings {
      "java.io.Serializable" = java
    }
  }
 
  # Used to set the behavior of the scheduler.
  # Changing the default values may change the system behavior drastically so make sure
  # you know what you're doing! See the Scheduler section of the Akka documentation for more details.
  scheduler {
    # The HashedWheelTimer (HWT) implementation from Netty is used as the default scheduler
    # in the system.
    # HWT does not execute the scheduled tasks on exact time.
    # It will, on every tick, check if there are any tasks behind the schedule and execute them.
    # You can increase or decrease the accuracy of the execution timing by specifying smaller
    # or larger tick duration.
    # If you are scheduling a lot of tasks you should consider increasing the ticks per wheel.
    # For more information see: http://www.jboss.org/netty/
    tick-duration = 100ms
    ticks-per-wheel = 512
  }
  
  remote {
    transport = "akka.remote.netty.NettyRemoteTransport"
    netty {
      hostname = "127.0.0.1"
      port = 2552
    }
 }
}
